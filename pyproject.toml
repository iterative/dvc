[build-system]
requires = ["setuptools>=61", "setuptools_scm[toml]>=7"]
build-backend = "setuptools.build_meta"

[project]
name = "dvc"
description = "Git for data scientists - manage your code and data together"
readme = "README.rst"
keywords = [
    "data-science",
    "data-version-control",
    "machine-learning",
    "git",
    "developer-tools",
    "reproducibility",
    "collaboration",
    "ai",
]
license = { text = "Apache License 2.0" }
authors = [{ name = "Dmitry Petrov", email = "dmitry@dvc.org" }]
maintainers = [{ name = "Iterative", email = "support@dvc.org" }]
requires-python = ">=3.8"
dependencies = [
    "colorama>=0.3.9",
    "configobj>=5.0.6",
    "voluptuous>=0.11.7",
    "requests>=2.22.0",
    "grandalf>=0.7,<1",
    "distro>=1.3.0",
    "appdirs>=1.4.3",
    "ruamel.yaml>=0.17.11",
    "tomlkit>=0.11.1",
    "funcy>=1.14",
    "pathspec>=0.10.3",
    "shortuuid>=0.5.0",
    "tqdm>=4.63.1,<5",
    "packaging>=19.0",
    "zc.lockfile>=1.2.1",
    "flufl.lock>=5",
    "networkx>=2.5",
    "psutil>=5.8.0",
    "pydot>=1.2.4",
    "importlib-resources>=5.2.2; python_version < '3.9'",
    "flatten_dict>=0.4.1,<1",
    "tabulate>=0.8.7",
    "pygtrie>=2.3.2",
    "dpath>=2.0.2,<3",
    "shtab>=1.3.4,<2",
    "rich>=10.13.0",
    "pyparsing>=2.4.7",
    "typing-extensions>=3.7.4",
    "scmrepo==0.1.6",
    "dvc-render==0.0.17",
    "dvc-task==0.1.11",
    "dvclive>=1.2.2",
    "dvc-data==0.35.1",
    "dvc-http",
    "hydra-core>=1.1.0",
    "iterative-telemetry==0.0.6",
    "dvc-studio-client>=0.1.1"
]
dynamic = ["version"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[project.optional-dependencies]
azure = ["dvc-azure==2.21.0"]
gdrive = ["dvc-gdrive==2.19.1"]
gs = ["dvc-gs==2.20.0"]
hdfs = ["dvc-hdfs==2.19.0"]
oss = ["dvc-oss==2.19.0"]
s3 = ["dvc-s3==2.21.0"]
ssh = ["dvc-ssh==2.21.0"]
ssh_gssapi = ["dvc-ssh[gssapi]==2.21.0"]
webdav = ["dvc-webdav==2.19.0"]
webhdfs = ["dvc-webhdfs==2.19.0"]
webhdfs_kerberos = ["dvc-webhdfs[kerberos]==2.19.0"]
terraform = ["tpi[ssh]>=2.1.0"]
testing = ["pytest-test-utils==0.0.8"]
tests = [
    "tpi[ssh]>=2.1.0",
    "dvc-ssh==2.21.0",
    "pytest-test-utils==0.0.8",
    # Test requirements
    "pytest==7.2.1",
    "pytest-cov==4.0.0",
    "pytest-xdist==3.1.0",
    "pytest-mock==3.10.0",
    "pytest-lazy-fixture==0.6.3",
    # https://github.com/docker/docker-py/issues/2902
    "pytest-docker==0.11.0; python_version < '3.10' or sys_platform != 'win32'",
    "flaky==3.7.0",
    "pytest-timeout==2.1.0",
    "filelock==3.9.0",
    "beautifulsoup4==4.11.1",
    "pywin32>=225; sys_platform == 'win32'",  # optional dependency
    "pylint==2.15.10",
    # type-checking
    "mypy==0.991",
    "types-requests",
    "types-tabulate",
    "types-toml",
    "types-appdirs",
    "types-colorama",
    "types-psutil",
    "types-tqdm",
]
all = ["dvc[azure,gdrive,gs,hdfs,oss,s3,ssh,webdav,webhdfs]"]
dev = ["dvc[azure,gdrive,gs,hdfs,oss,s3,ssh,webdav,webhdfs,tests]"]

[project.urls]
Documentation = "https://dvc.org/doc"
"Bug Tracker" = "https://github.com/iterative/dvc/issues"
Source = "https://github.com/iterative/dvc"

[project.scripts]
dvc = "dvc.cli:main"

[project.entry-points."fsspec.specs"]
dvc = "dvc.api:DVCFileSystem"

[tool.setuptools]
license-files = ["LICENSE"]

[tool.setuptools.packages]
find = {namespaces = false, exclude=["tests", "tests.*"]}

[tool.setuptools_scm]
write_to = "dvc/_dvc_version.py"

[tool.black]
line-length = 79
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
known_first_party = ["dvc", "dvc_data", "dvc_objects", "dvc_render", "dvc_task", "tests"]
line_length = 79

[tool.ruff]
line-length = 79
target-version = "py38"
show-source = true
ignore = ["S101", "SIM105", "SIM108", "SIM110", "SIM111", "SIM117", "A003", "ARG002", "PLR2004"]
select = ["F", "E", "W", "C90", "UP", "YTT", "S", "BLE", "B", "A", "C4", "T10", "ISC", "ICN", "T20", "PT003", "PT008", "PT009", "PT010", "PT015", "PT016", "PT017", "PT020", "PT021", "PT024", "PT025", "PT026", "Q", "RET501", "RET504", "SIM", "ARG", "TID", "PGH", "PLC", "PLE", "PLR", "PLW", "PIE", "RUF"]
# external flake8 codes that should be preserved
external = ["B301", "B024", "C901", "E302", "F401", "W601"]

[tool.ruff.per-file-ignores]
"scripts/**/*.py" = ["T201"]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "csv"

[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.flake8-tidy-imports]
[tool.ruff.flake8-tidy-imports.banned-api]
"funcy.cached_property".msg = "use `from dvc.utils.objects import cached_property` instead."

[tool.pytest.ini_options]
log_level = "debug"
addopts = "-ra --cov-config pyproject.toml"
markers = [
    "needs_internet: Might need network access for the tests",
    "vscode: Tests verifying contract between DVC and VSCode plugin",
    "studio: Tests verifying contract between DVC and Studio",
]
xfail_strict = true
testpaths = ["tests"]
filterwarnings = ["error::pytest_mock.PytestMockWarning"]

[tool.coverage.run]
branch = true
source = ["dvc", "tests"]

[tool.coverage.paths]
source = ["dvc"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "if typing.TYPE_CHECKING:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "raise AssertionError",
    "@overload",
]

[tool.mypy]
# Error output
show_column_numbers = true
show_error_codes = true
show_error_context = true
show_traceback = true
pretty = true
no_implicit_optional = true
check_untyped_defs = true
strict_equality = true
strict_concatenate = true
# Warnings
warn_no_return = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
ignore_missing_imports = true
files = ["dvc"]

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "configobj.*",
    "dpath.*",
    "dvc_http.*",
    "dvc_render.*",
    "dvc_ssh",
    "dvc_studio_client.*",
    "flatten_dict",
    "fsspec.*",
    "funcy.*",  # https://github.com/Suor/funcy/issues/106,
    "grandalf.*",
    "ipdb",
    "iterative_telemetry",
    "kombu.*",
    "networkx.*",  # https://github.com/networkx/networkx/issues/3988
    "pygtrie.*",
    "pyinstrument",
    "pytest_docker.plugin",
    "ruamel.*",
    "ruamel.yaml.*",
    "scmrepo.*",
    "tpi.*",
    "viztracer",
    "voluptuous",
    "yappi",
    "zc.*",
]
ignore_missing_imports = true

[tool.pylint.message_control]
disable = [
    "format", "refactoring", "spelling", "design",
    "invalid-name", "duplicate-code", "fixme",
    "unused-wildcard-import", "cyclic-import", "wrong-import-order",
    "wrong-import-position", "ungrouped-imports", "multiple-imports",
    "logging-format-interpolation", "logging-fstring-interpolation",
    "missing-function-docstring", "missing-module-docstring",
    "missing-class-docstring", "raise-missing-from", "import-outside-toplevel",
]
enable = ["c-extension-no-member", "no-else-return"]

[tool.pylint.typecheck]
generated-members = ["pytest.lazy_fixture", "logging.TRACE", "logger.trace", "sys.getwindowsversion", "argparse.Namespace"]
signature-mutators = ["funcy.decorators.decorator"]

[tool.pylint.variables]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)"
ignored-argument-names = "_.*|args|kwargs"

[tool.codespell]
ignore-words-list = "ba,datas,fo,uptodate,cachable,falsy"
